// <auto-generated/>
#pragma warning disable
using Marten;
using Marten.Events.Aggregation;
using Marten.Internal.Storage;
using System;
using System.Linq;
using System.Threading;

namespace Marten.Generated.EventStore
{
    // START: SingleStreamProjectionLiveAggregation1120212167
    public class SingleStreamProjectionLiveAggregation1120212167 : Marten.Events.Aggregation.SyncLiveAggregatorBase<EventSourcingTests.Bugs.Projector>
    {
        private readonly Marten.Events.Aggregation.SingleStreamProjection<EventSourcingTests.Bugs.Projector> _singleStreamProjection;

        public SingleStreamProjectionLiveAggregation1120212167(Marten.Events.Aggregation.SingleStreamProjection<EventSourcingTests.Bugs.Projector> singleStreamProjection)
        {
            _singleStreamProjection = singleStreamProjection;
        }


        public System.Action<EventSourcingTests.Bugs.Projector, EventSourcingTests.Bugs.EventOne> Lambda1 {get; set;}


        public override EventSourcingTests.Bugs.Projector Build(System.Collections.Generic.IReadOnlyList<Marten.Events.IEvent> events, Marten.IQuerySession session, EventSourcingTests.Bugs.Projector snapshot)
        {
            if (!events.Any()) return snapshot;
            var usedEventOnCreate = snapshot is null;
            snapshot ??= Create(events[0], session);;
            if (snapshot is null)
            {
                usedEventOnCreate = false;
                snapshot = CreateDefault(events[0]);
            }

            foreach (var @event in events.Skip(usedEventOnCreate ? 1 : 0))
            {
                snapshot = Apply(@event, snapshot, session);
            }

            return snapshot;
        }


        public EventSourcingTests.Bugs.Projector Create(Marten.Events.IEvent @event, Marten.IQuerySession session)
        {
            return null;
        }


        public EventSourcingTests.Bugs.Projector Apply(Marten.Events.IEvent @event, EventSourcingTests.Bugs.Projector aggregate, Marten.IQuerySession session)
        {
            Console.WriteLine($"{Thread.CurrentThread.ManagedThreadId}: FINAL APPLY, Lambda1 is null: {Lambda1 is null}");

            switch (@event)
            {
                case Marten.Events.IEvent<EventSourcingTests.Bugs.EventOne> event_EventOne1:
                    Lambda1.Invoke(aggregate, event_EventOne1.Data);
                    break;
            }

            return aggregate;
        }

    }

    // END: SingleStreamProjectionLiveAggregation1120212167


    // START: SingleStreamProjectionInlineHandler1120212167
    public class SingleStreamProjectionInlineHandler1120212167 : Marten.Events.Aggregation.AggregationRuntime<EventSourcingTests.Bugs.Projector, System.Guid>
    {
        private readonly Marten.IDocumentStore _store;
        private readonly Marten.Events.Aggregation.IAggregateProjection _projection;
        private readonly Marten.Events.Aggregation.IEventSlicer<EventSourcingTests.Bugs.Projector, System.Guid> _slicer;
        private readonly Marten.Internal.Storage.IDocumentStorage<EventSourcingTests.Bugs.Projector, System.Guid> _storage;
        private readonly Marten.Events.Aggregation.SingleStreamProjection<EventSourcingTests.Bugs.Projector> _singleStreamProjection;

        public SingleStreamProjectionInlineHandler1120212167(Marten.IDocumentStore store, Marten.Events.Aggregation.IAggregateProjection projection, Marten.Events.Aggregation.IEventSlicer<EventSourcingTests.Bugs.Projector, System.Guid> slicer, Marten.Internal.Storage.IDocumentStorage<EventSourcingTests.Bugs.Projector, System.Guid> storage, Marten.Events.Aggregation.SingleStreamProjection<EventSourcingTests.Bugs.Projector> singleStreamProjection) : base(store, projection, slicer, storage)
        {
            _store = store;
            _projection = projection;
            _slicer = slicer;
            _storage = storage;
            _singleStreamProjection = singleStreamProjection;
        }


        public System.Action<EventSourcingTests.Bugs.Projector, EventSourcingTests.Bugs.EventOne> Lambda1 {get; set;}


        public override async System.Threading.Tasks.ValueTask<EventSourcingTests.Bugs.Projector> ApplyEvent(Marten.IQuerySession session, Marten.Events.Projections.EventSlice<EventSourcingTests.Bugs.Projector, System.Guid> slice, Marten.Events.IEvent evt, EventSourcingTests.Bugs.Projector aggregate, System.Threading.CancellationToken cancellationToken)
        {
            switch (evt)
            {
                case Marten.Events.IEvent<EventSourcingTests.Bugs.EventOne> event_EventOne2:
                    aggregate ??= CreateDefault(evt);
                    Lambda1.Invoke(aggregate, event_EventOne2.Data);
                    return aggregate;
            }

            return aggregate;
        }


        public EventSourcingTests.Bugs.Projector Create(Marten.Events.IEvent @event, Marten.IQuerySession session)
        {
            return null;
        }

    }

    // END: SingleStreamProjectionInlineHandler1120212167


}

